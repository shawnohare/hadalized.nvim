import functools
import json
import tomllib
from collections import defaultdict
from collections.abc import Generator
from functools import reduce

# import hashlib
from copy import deepcopy
from itertools import product
from pathlib import Path
from typing import Literal, Self, TypedDict, Tuple

import coloraide

# import luadata
import pkg_resources

from pydantic import Field, BaseModel
from jinja2 import Environment, PackageLoader, select_autoescape

from .config import Config, TemplateConfig, TemplateConfigNode
from .context import Theme
from . import utils


# class ColorSet(Model):
#     """A collection of colors over some color spaces of interest."""
#     oklch: Color
#     srgb: Color
#     p3: Color
#     rec2020: Color
#
#     def hex(self, gamut: str = "srgb") -> str:
#         """Obtain the hex code for the provided RGB space."""
#         return self[gamut].hex
#
#     @classmethod
#     def parse(cls, css: str) -> Self:
#         """Obtain a set of colors in various spaces from a CSS string."""
#         color = coloraide.Color(css)
#         data = {k: Color.new(color, k) for k in Spaces}
#         return cls.model_validate(data)
#
#     @classmethod
#     def map(cls, colors: dict[str, str]) -> dict[str, Self]:
#         return {k: cls.parse(v) for k, v in colors.items()}
#
#     @classmethod
#     def map_spaces(cls, colors: dict[str, str]) -> dict[str, dict[str, Color]]:
#         """For each colorspace, map a  """
#         spaces = {k: {} for k in Spaces}
#         for key, css in colors.items():
#             color = coloraide.Color(css)
#             for space in Spaces:
#                 spaces[space][key] = Color.new(color, space)
#         return spaces
#
#     def __bool__(self) -> bool:
#         return bool(self.oklch)


class ThemeWriter:
    """Render application theme templates and write resulting theme files."""

    def __init__(self, theme: Theme):
        self.theme = theme
        self.env = Environment(
            loader=PackageLoader("hadalized"), autoescape=select_autoescape()
        )

    def __call__(self, app: str):
        """Render and write application theme templates.

        Args:
            app: Subdirectory of "templates" containing
                application theme templates. For example "wezterm".
        """
        template_config = TemplateConfig.load(app)

        # FIXME: Need to grab path to config
        # Render and write a template for each template file and context item.
        for path in config_path.parent.glob("*"):
            if path.name == "config.toml":
                continue
            template_config = config.get(path.stem, config["default"])
            template_path = subdir_path / path.name
            for context in self.context(template_config):
                self.write(template_path, template_config, context)

    def write(self, path: Path, config: TemplateConfig, context: ColorContext):
        """Write a single file given the template config and context.

        Args:
            path: Relative path to template, e.g., {app}/default.toml
        """

        out_dir = config.output / path.parent
        out_dir.parent.mkdir(exist_ok=True, parents=True)

        filename = config.filename.format(
            scheme=context.get("name", ""),
            mode=context.get("mode", ""),
            gamut=context.get("gamut", ""),
            extension=config.extension,
        ).strip("_")

        with (out_dir / filename).open("w") as fp:
            template = self.env.get_template(str(path))
            text = template.render(c=context, **context.dump(), **context.colors)
            fp.write(text)


# def main():
#     views = Views()
#     # modes = {k: v.modes() for k, v in Schemes.items()}
#     Scheme_dicts = {k: v.to_dict() for k, v in views.Schemes.items()}
#
#     with open("lua/hadalized/Schemes.lua", "w") as fp:
#         print("Writing hadalized neovim theme Scheme module.")
#         tables = luadata.serialize(views.to_hex(), indent="\t")
#         # print(tables)
#         # print(views.to_hex(flatten=False))
#         fp.write(f"""-- WARNING: Autogenerated\n\nreturn {tables}""")
#
#     # Dump Scheme color objects.
#     with open("Schemes.json", "w") as fp:
#         json.dump(Scheme_dicts, fp, indent=4)
#
#     # WIP: Render and write templates.
#     writer = Writer()
#     context = views.get_space('hadalized', 'dark', 'p3')
#     writer('wezterm/default.toml', context)
#     context = views.get_space('hadalized', 'light', 'p3')
#     writer('wezterm/default.toml', context)
#
#
# if __name__ == "__main__":
#    main()
