[theme]
name = "hadalized"
version = "v0.1.0"
url = "https://github.com/shawnohare/hadalized.nvim"

# Global colors defined by the theme. Specific modes can
# alias or re-define these colors as needed.
[colors]
# main accents
red = "oklch(0.60 0.15 25)"
orange = "oklch(0.60 0.15 55)"
yellow = "oklch(0.60 0.15 110)"
green = "oklch(0.60 0.15 145)"
cyan = "oklch(0.60 0.15 185)"
blue = "oklch(0.60 0.15 235)"
violet = "oklch(0.60 0.15 290)"
magenta = "oklch(0.60 0.15 335)"
# background accents
br_red = "oklch(0.75 0.15 25)"
br_orange = "oklch(0.75 0.15 55)"
br_yellow = "oklch(0.75 0.15 110)"
br_green = "oklch(0.75 0.15 145)"
br_cyan = "oklch(0.75 0.15 185)"
br_blue = "oklch(0.75 0.15 235)"
br_violet = "oklch(0.75 0.15 290)"
br_magenta = "oklch(0.75 0.15 335)"
# bases
dark0 = "oklch(0.13 0.020 220)"
dark1 = "oklch(0.18 0.020 220)"
dark2 = "oklch(0.23 0.020 220)"
gray0 = "oklch(0.45 0.005 220)"
gray1 = "oklch(0.60 0.005 220)"
gray2 = "oklch(0.75 0.005 220)"
light0 = "oklch(0.85 0.010 90)"
light1 = "oklch(0.90 0.010 90)"
light2 = "oklch(0.95 0.010 90)"

# A mode is a variant such as "dark", "light", "high_contrast_dark".
# Each mode can contain its own color re-definitions and aliases.
[modes.dark]
name = "dark"
background = "dark"

[modes.dark.colors]
bg0 = "dark0"
bg1 = "dark1"
bg2 = "dark2"
fg0 = "gray0"
fg1 = "gray1"
fg2 = "gray2"
op0 = "light0"
op1 = "light1"
op2 = "light2"

[modes.light]
name = "light"
background = "light"

[modes.light.colors]
# red = "oklch(0.50, 0.15, 25)"
bg0 = "light2"
bg1 = "light1"
bg2 = "light0"
fg0 = "gray2"
fg1 = "gray1"
fg2 = "gray0"
op0 = "dark2"
op1 = "dark1"
op2 = "dark0"


# Default highlight groups define a foreground, background, and style component
# relative to a mode's colors.
# Semantically they are almost identical to vim's highlight groups and
# vscode's highlight tokens.
[hl]
color00 =  { fg = "dark2" }
color01 =  { fg= "red" }
color02 =  { fg = "green" }
color03 =  { fg= "yellow" }
color04 =  { fg= "blue" }
color05 =  { fg = "magenta" }
color06 =  { fg = "cyan" }
color07 =  { fg = "gray2" }
color08 =  { fg = "gray0" }
color09 =  { fg = "orange" }
color10 =  { fg = "br_green" }
color11 =  { fg ="br_yellow" }
color12 =  { fg = "br_blue" }
color13 =  { fg = "violet" }
color14 =  { fg = "br_cyan" }
color15 =  { fg = "light0" }

#Standard token types:
# class 	For identifiers that declare or reference a class type.
# comment 	For tokens that represent a comment.
# decorator 	For identifiers that declare or reference decorators and annotations.
# enum 	For identifiers that declare or reference an enumeration type.
# enumMember 	For identifiers that declare or reference an enumeration property, constant, or member.
# event 	For identifiers that declare an event property.
# function 	For identifiers that declare a function.
# interface 	For identifiers that declare or reference an interface type.
# keyword 	For tokens that represent a language keyword.
# label 	For identifiers that declare a label.
# macro 	For identifiers that declare a macro.
# method 	For identifiers that declare a member function or method.
# namespace 	For identifiers that declare or reference a namespace, module, or package.
# number 	For tokens that represent a number literal.
# operator 	For tokens that represent an operator.
# parameter 	For identifiers that declare or reference a function or method parameters.
# property 	For identifiers that declare or reference a member property, member field, or member variable.
# regexp 	For tokens that represent a regular expression literal.
# string 	For tokens that represent a string literal.
# struct 	For identifiers that declare or reference a struct type.
# type 	For identifiers that declare or reference a type that is not covered above.
# typeParameter 	For identifiers that declare or reference a type parameter.
# variable 	For identifiers that declare or reference a local or global variable.
# #
#Standard token modifiers:
# ID 	Description
# declaration 	For declarations of symbols.
# definition 	For definitions of symbols, for example, in header files.
# readonly 	For readonly variables and member fields (constants).
# static 	For class members (static members).
# deprecated 	For symbols that should no longer be used.
# abstract 	For types and member functions that are abstract.
# async 	For functions that are marked async.
# modification 	For variable references where the variable is assigned to.
# documentation 	For occurrences of symbols in documentation.
# defaultLibrary 	For symbols that are part of the standard library.
#
# class         Structure
# decorator     Function
# enum          Structure
# enumMember    Constant
# function      Function
# identifier    Identifier
# interface     Structure
# macro         Macro
# method        Function
# namespace     Structure
# parameter     Identifier
# property      Identifier
# struct        Structure
# type          Type
# typeParameter TypeDef
# variable      Identifier

"type.integer" = {}
"type.float" = {}
"type.string" = {}
"text.normal" = {fg = "fg2", bg = "bg0" }
# "comment.doc" = { italic = true }
"comment.doc.python" = {}
selection = {}


